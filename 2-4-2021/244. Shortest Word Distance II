#244. Shortest Word Distance II
#https://leetcode.com/problems/shortest-word-distance-ii/


class WordDistance:

    def __init__(self, words: List[str]):
        self.locations = defaultdict(list)

        # Prepare a mapping from a word to all it's locations (indices).
        for i, w in enumerate(words):
            self.locations[w].append(i)
    def shortest(self, word1: str, word2: str) -> int:
        loc1, loc2 = self.locations[word1], self.locations[word2]
        l1, l2 = 0, 0
        L1, L2 = len(loc1), len(loc2)
        mind = float('inf')
        while l1 < L1 and l2 < L2:
            mind = min(mind, abs(loc1[l1] - loc2[l2]))
            if loc1[l1] < loc2[l2]:
                l1 += 1
            else:
                l2 += 1
        
        return mind
