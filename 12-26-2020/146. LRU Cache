#146. LRU Cache
#https://leetcode.com/problems/lru-cache/

class Node():
    def __init__(self):
        self.key = 0
        self.val = 0
        self.pre = None
        self.next = None


class LRUCache:    
    
    def __init__(self, capacity: int):
        self.cap = capacity
        self.size = 0
        self.cache = {}
        self.head = Node()
        self.tail = Node()
        self.head.next = self.tail
        self.tail.pre  = self.head

    def _add_node(self, node):
        node.pre = self.head
        node.next = self.head.next
        
        self.head.next.pre = node
        self.head.next     = node
        
    def _remove(self, node):
        pre = node.pre
        nxt = node.next
        pre.next = nxt
        nxt.pre  = pre
        
    def _head(self, node):
        self._remove(node)
        self._add_node(node)
    
    def _pop(self):
        res = self.tail.pre
        self._remove(res)
        return res
        
    def get(self, key: int) -> int:
        node = self.cache.get(key, None)
        if not node:
            return -1
        
        self._head(node)
        return node.val

    def put(self, key: int, value: int) -> None:
        node = self.cache.get(key, None)
        if not node:
            node = Node()
            node.key = key
            node.val = value
            
            self.cache[key] = node
            self._add_node(node)
            
            if self.size+1 > self.cap:
                tail = self._pop()
                del self.cache[tail.key]
            else:
                self.size += 1
        else:
            node.val = value
            self._head(node)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)